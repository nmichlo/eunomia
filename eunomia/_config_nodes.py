from typing import Any
from eunomia._interpreter import interpret_expr


# ========================================================================= #
# Base Loaders                                                              #
# ========================================================================= #


class Node(object):

    def __repr__(self):
        return f'{self.__class__.__name__}(...)'

    def __str__(self):
        return repr(self)

    def get_value(self, merged_config: dict, merged_defaults: dict):
        raise NotImplementedError


# ========================================================================= #
# Base Loaders                                                              #
# ========================================================================= #


# class InterpNode(Node):
#
#     def __init__(self, tokens: list):
#         assert isinstance(tokens, list), f'{tokens=} must be a list generated by _tokenize_string'
#         self.raw_tokens = tokens
#
#     def get_value(self, merged_config: dict, merged_defaults: dict) -> str:
#         return interpolate(self.raw_tokens, merged_config, merged_defaults)


class IgnoreNode(Node):

    TAG = '!str'

    def __init__(self, value):
        self.raw_value = value

    def get_value(self, merged_config: dict, merged_defaults: dict):
        return self.raw_value


class RefNode(Node):

    TAG = '!ref'

    def __init__(self, string: str):
        assert isinstance(string, str), f'{string=} corresponding to {self.TAG} must be a string.'
        self.raw_string = string

    def get_value(self, merged_config: dict, merged_defaults: dict) -> Any:
        raise NotImplementedError('TODO!')
        # return interpolate_single(self.raw_string, merged_config, merged_defaults)


class EvalNode(Node):
    TAG = '!eval'

    def __init__(self, string: str):
        assert isinstance(string, str), f'{string=} corresponding to {self.TAG} must be a string.'
        self.raw_string = string

    def get_value(self, merged_config: dict, merged_defaults: dict):
        return interpret_expr(self.raw_string, usersyms={
            'C': merged_config,
            'D': merged_defaults,
            'CONFIG': merged_defaults,
            'DEFAULTS': merged_defaults,
        })


# ========================================================================= #
# Yaml Loader                                                               #
# ========================================================================= #
